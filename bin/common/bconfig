#!/bin/sh

DOTFILES_DIR="${HOME}"/src/dotfiles
CONFIG_DIR="${DOTFILES_DIR}"/config
BIN_DIR="${DOTFILES_DIR}"/bin
RESULT_DIR="${DOTFILES_DIR}"/.result
SHARE_DIR="${DOTFILES_DIR}"/share

if [ "$(hostname)" = "brendono'l" ]
then
  # Work computer
  MACHINE="arroyo"
else
  # Personal computer
  MACHINE="goodsprings"
fi

SHARE_TARGET="${HOME}/.share/bconfig"
SHARE_SOURCE="${RESULT_DIR}/share"
BIN_TARGET="${HOME}/.bin"
BIN_SOURCE="${RESULT_DIR}/bin"

setup_dirs() {
  mkdir -p "${HOME}"/.share
  mkdir -p "${HOME}"/.config/nvim
  mkdir -p "${HOME}"/.ssh
  mkdir -p "${HOME}"/.doom.d
  mkdir -p "${HOME}"/.emacs.d
}

link() {
  if [ -f "${1}" ]
  then
    ln -sf "${1}" "${2}"
  fi
}

compose_files() {
  # Combine common and machine specific config files
  if [ -r "${CONFIG_DIR}/common/${1}" ] && [ -r "${CONFIG_DIR}/${MACHINE}/${1}" ]
  then
    cat "${CONFIG_DIR}/common/${1}" "${CONFIG_DIR}/${MACHINE}/${1}" > "${RESULT_DIR}/${1}"
  elif [ -r "${CONFIG_DIR}/${MACHINE}/${1}" ]
  then
    cp "${CONFIG_DIR}/${MACHINE}/${1}" "${RESULT_DIR}/${1}"
  elif [ -r "${CONFIG_DIR}/common/${1}" ]
  then
    cp "${CONFIG_DIR}/common/${1}" "${RESULT_DIR}/${1}"
  fi
}

copy_share() {
  mkdir -p "${SHARE_SOURCE}"
  cp "${SHARE_DIR}"/common/* "${SHARE_SOURCE}"
  # cp "${SHARE_DIR}"/"${MACHINE}"/* "${SHARE_SOURCE}"
}

link_share() {
  ln -sf "${SHARE_SOURCE}" "${SHARE_TARGET}"
}

source_share() {
  # shellcheck source=../../share/common/file_links.sh
  . "${SHARE_TARGET}"/file_links.sh
  # shellcheck source=../../share/common/install_externals.sh
  . "${SHARE_TARGET}"/install_externals.sh
}

copy_bins() {
  mkdir -p "${BIN_SOURCE}"
  cp "${BIN_DIR}"/common/* "${BIN_SOURCE}"
  cp "${BIN_DIR}"/"${MACHINE}"/* "${BIN_SOURCE}"
}

link_bins() {
  ln -sf "${BIN_SOURCE}" "${BIN_TARGET}"
}

build_files() {
  mkdir -p "${RESULT_DIR}"
  copy_share
  copy_bins
  compose_files "init.vim"  
  compose_files "zshrc"
  compose_files "zshenv"
  compose_files "tmux.conf"
  compose_files "doomconfig.el"
  compose_files "doominit.el"
  compose_files "doompackages.el"
  compose_files "Brewfile"
  compose_files "gitconfig"
  compose_files "sshconfig"
  compose_files "streamlinkrc"
}

link_files() {
  link_share
  link_bins
  source_share
  clean_files
  link "${NVIMINIT_SOURCE}" "${NVIMINIT_TARGET}"
  link "${ZSHRC_SOURCE}" "${ZSHRC_TARGET}"
  link "${ZSHENV_SOURCE}" "${ZSHENV_TARGET}"
  link "${TMUXCONF_SOURCE}" "${TMUXCONF_TARGET}"
  link "${DOOMCONFIG_SOURCE}" "${DOOMCONFIG_TARGET}"
  link "${DOOMINIT_SOURCE}" "${DOOMINIT_TARGET}"
  link "${DOOMPACKAGES_SOURCE}" "${DOOMPACKAGES_TARGET}"
  link "${BREWFILE_SOURCE}" "${BREWFILE_TARGET}"
  link "${GITCONFIG_SOURCE}" "${GITCONFIG_TARGET}"
  link "${SSHCONFIG_SOURCE}" "${SSHCONFIG_TARGET}"
  link "${STREAMLINKRC_SOURCE}" "${STREAMLINKRC_TARGET}"
}

clean_setup() {
  rm -rf "${RESULT_DIR}"
  rm -rf "${SHARE_TARGET}"
  rm -f "${BIN_TARGET}"
}

clean_files() {
  rm -f "${NVIMINIT_TARGET}"
  rm -f "${ZSHRC_TARGET}"
  rm -f "${ZSHENV_TARGET}"
  rm -f "${TMUXCONF_TARGET}"
  rm -f "${DOOMCONFIG_TARGET}"
  rm -f "${DOOMINIT_TARGET}"
  rm -f "${DOOMPACKAGES_TARGET}"
  rm -f "${BREWFILE_TARGET}"
  rm -f "${GITCONFIG_TARGET}"
  rm -f "${SSHCONFIG_TARGET}"
  rm -f "${STREAMLINKRC_TARGET}"
}

pre_install() {
  install_homebrew
}

post_install() {
  install_externals
  if [ "${MACHINE}" = "arroyo" ]
  then
    clio_setup
  fi
}

set_packages() {
  brew bundle cleanup --global --force
  brew bundle install --global --no-upgrade
}

upgrade_packages() {
  brew bundle cleanup --global --force
  brew bundle install --global
}

build_config() {
  setup_dirs
  build_files
  link_files
}

reconfigure() {
  clean_setup
  build_config
}

init() {
  reconfigure
  pre_install
  set_packages
  post_install
}

sync() {
  reconfigure
  set_packages
}

upgrade() {
  reconfigure
  upgrade_packages
}

usage() {
  echo "bconfig [COMMAND]"
  echo ""
  echo "Commands:"
  echo ""
  echo "  init:        Installs everything for the first time."
  echo "  sync:        Applies all configuration changes, including packages."
  echo "  upgrade:     Upgrades all packages."
  echo "  reconfigure: Applies all configuration changes, except packages."
}

main() {
  case "${1}" in
    "init")
      init
      ;;
    "sync")
      sync
      ;;
    "upgrade")
      upgrade
      ;;
    "reconfigure")
      reconfigure
      ;;
    *)
      usage
      ;;
  esac
}


main "${1}"

